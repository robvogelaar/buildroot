diff -Naur a/rockford/middleware/v3d/vcfw/rtos/abstract/rtos_abstract_mem.c b/rockford/middleware/v3d/vcfw/rtos/abstract/rtos_abstract_mem.c
--- a/rockford/middleware/v3d/vcfw/rtos/abstract/rtos_abstract_mem.c	2016-03-16 15:25:07.077006662 -0700
+++ b/rockford/middleware/v3d/vcfw/rtos/abstract/rtos_abstract_mem.c	2016-10-25 15:49:45.240318310 -0700
@@ -710,6 +710,11 @@
    - MEM_HANDLE_INVALID is returned.
 */
 
+extern void tditrace_ex(int mask, const char* format, ...) __attribute__((weak));
+#define TDIMASKGPU (0x80000000) /* GPU */
+#define TDIMASKGPUxxx (0x40000000) /* GPUxxx */
+#include <malloc.h>
+
 MEM_HANDLE_T mem_alloc_ex(
    uint32_t size,
    uint32_t align,
@@ -717,6 +722,11 @@
    const char *desc,
    mem_compact_mode_t mode)
 {
+   unsigned int ra = 0;
+   #ifdef __mips__
+   asm volatile("move %0, $ra" : "=r"(ra));
+   #endif
+
    MEM_HEADER_T * h;
 
    UNUSED(mode);
@@ -740,6 +750,32 @@
    }
 
    init_header(h, size, align, flags, desc);
+
+   if (tditrace_ex != NULL) {
+      char text[256];
+      int i;
+      strcpy(text, desc);
+      for (i = 0; i < strlen(text); i++) {
+         if (text[i] == ' ') text[i] = '_';
+      }
+
+      if (h->ptr == NULL) {
+         tditrace_ex(TDIMASKGPU, "@E+gpu_alloc_fail %s%n%n", text, ra, size);
+      } else {
+         if (flags & MEM_FLAG_DIRECT) {
+            tditrace_ex(TDIMASKGPUxxx, "@E+gpu_alloc %s%n%n%n", text, ra, size, h->ptr);
+            tditrace_ex(TDIMASKGPUxxx, "gpu_alloc~%d", size);
+            tditrace_ex(TDIMASKGPU, "GPU~%d", g_mgr.memInterface->GetInfo(g_mgr.memInterface->context, BEGL_MemFree));
+         } else {
+            tditrace_ex(TDIMASKGPUxxx, "@E+gpu_alloc* %s%n%n%n", text, ra, size, h->ptr);
+            tditrace_ex(TDIMASKGPUxxx, "gpu_alloc*~%d", size);
+            //struct mallinfo mi;
+            //mi = mallinfo();
+            //tditrace_ex(TDIMASK, "gpu_mi.arena~%d", mi.arena);
+         }
+      }
+   }
+
    if ((h->size > 0) && (h->ptr == NULL))
    {
       free(h);
@@ -821,6 +857,11 @@
 
 void mem_release_inner(MEM_HEADER_T *h)
 {
+   unsigned int ra = 0;
+   #ifdef __mips__
+   asm volatile("move %0, $ra" : "=r"(ra));
+   #endif
+
    /* put me back in if things start to go wrong */
    /*assert((handle != MEM_ZERO_SIZE_HANDLE) && (handle != MEM_EMPTY_STRING_HANDLE));*/
 
@@ -845,6 +886,18 @@
       }
    }
    free(h);
+
+   if (tditrace_ex != NULL) {
+      if (h->flags & MEM_FLAG_DIRECT) {
+         tditrace_ex(TDIMASKGPUxxx, "@E+gpu_release%n", ra);
+         tditrace_ex(TDIMASKGPU, "GPU~%d", g_mgr.memInterface->GetInfo(g_mgr.memInterface->context, BEGL_MemFree));
+      } else {
+         tditrace_ex(TDIMASKGPUxxx, "@E+gpu_release*%n", ra);
+         //struct mallinfo mi;
+         //mi = mallinfo();
+         //tditrace_ex(TDIMASK, "gpu_mi.arena~%d", mi.arena);
+      }
+   }
 }
 
 /*
@@ -1114,6 +1167,11 @@
    uint32_t size,
    mem_compact_mode_t mode)
 {
+   unsigned int ra = 0;
+   #ifdef __mips__
+   asm volatile("move %0, $ra" : "=r"(ra));
+   #endif
+
    int res;
    MEM_HEADER_T *h = (MEM_HEADER_T *)handle;
    void * nptr;
@@ -1185,6 +1243,20 @@
 
    vcos_mutex_unlock((VCOS_MUTEX_T *)&g_mgr.mh);
 
+   if (tditrace_ex != NULL) {
+      if (h->flags & MEM_FLAG_DIRECT) {
+         tditrace_ex(TDIMASKGPUxxx, "@E+gpu_resize %d%n", size, ra);
+         //tditrace_ex(TDIMASK, "gpu_resize~%d", size);
+         tditrace_ex(TDIMASKGPU, "GPU~%d", g_mgr.memInterface->GetInfo(g_mgr.memInterface->context, BEGL_MemFree));
+      } else {
+         tditrace_ex(TDIMASKGPUxxx, "@E+gpu_resize* %d%n", size, ra);
+         //tditrace_ex(TDIMASK, "gpu_resize*~%d", size);
+         //struct mallinfo mi;
+         //mi = mallinfo();
+         //tditrace_ex(TDIMASK, "gpu_mi.arena~%d", mi.arena);
+      }
+   }
+
    return res;
 }
 
